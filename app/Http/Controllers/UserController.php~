<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreUserRequest;
use App\Http\Requests\UpdateUserRequest;
use App\Models\Photo;
use App\Models\Role;
use App\Models\User;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class UserController extends Controller
{
    use AuthorizesRequests;

    protected $folder = 'users';

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $search = request('search');
        $this->authorize('viewAdminPanel', User::class);

        $users = User::withTrashed()
            ->with(['roles','photo'])
            ->filter($search)
            ->sortable()
            ->paginate(20)
            ->appends(request()->query());

        return view('backend.users.index', compact('users')); // Ensure correct view file
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        // Weergave voor een nieuwe user
        $roles = Role::pluck('name', 'id')->all();
        return view('backend.users.create', compact('roles'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreUserRequest $request)
    {

        // Verkrijg de gevalideerde data (de validatieregels en -berichten staan nu in de Form Request)
        $validatedData = $request->validated();

        // Hash het wachtwoord
        $validatedData['password'] = Hash::make($validatedData['password']);

        // Foto-upload verwerken (indien aanwezig)
        if ($request->hasFile('photo_id')) {
            $file = $request->file('photo_id');
            $uniqueName = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $filePath = $this->folder . '/' . $uniqueName;

            // Sla het bestand op in de 'public'-disk (storage/app/public)
            $file->storeAs('', $filePath, 'public');

            // Maak een nieuw Photo-record aan
            $photo = Photo::create([
                'path' => $filePath,
                'alternate_text' => $validatedData['name']
            ]);
            $validatedData['photo_id'] = $photo->id;
        }

        // Maak de gebruiker aan (zonder expliciete rol-koppeling)
        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'is_active' => $validatedData['is_active'],
            'password' => $validatedData['password'],
            'photo_id' => $validatedData['photo_id'] ?? null,
        ]);

        // Koppel de gebruiker aan de geselecteerde rollen
        $user->roles()->sync($validatedData['role_id']);

        // Redirect naar de gebruikers-index met een succesmelding
        return redirect()->route('users.index')->with('message', 'User created successfully');
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        // Weergeven van 1 enkele user
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        $user = User::with('roles', 'photo')->findOrFail($id);

        $roles = Role::pluck('name', 'id')->all();
        $photoDetails = [
            'exists' => false,
            'filesize' => 0,
            'width' => 'N/A',
            'height' => 'N/A',
            'extension' => ''
        ];

        // Controleer of er een foto is en of deze bestaat op de 'public' disk
        if ($user->photo && Storage::disk('public')->exists($user->photo->path)) {
            $photoDetails['exists'] = true;
            $photoDetails['filesize'] = round(Storage::disk('public')->size($user->photo->path) / 1024, 2);
            $photoPath = Storage::disk('public')->path($user->photo->path);
            $dimensions = getimagesize($photoPath);
            $photoDetails['width'] = $dimensions[0] ?? 'N/A';
            $photoDetails['height'] = $dimensions[1] ?? 'N/A';
            $photoDetails['extension'] = Str::upper(pathinfo($user->photo->path, PATHINFO_EXTENSION));
        }
        return view('backend.users.edit', compact('user', 'roles', 'photoDetails'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateUserRequest $request, $id)
    {


        // Haal de gebruiker op (implicit route model binding is ook mogelijk)
        $user = User::findOrFail($id);

        // Verkrijg de gevalideerde data uit de Form Request
        $validatedData = $request->validated();

        // Verwerk het wachtwoord: als er een nieuw wachtwoord is ingevuld, hash deze; anders verwijderen we het zodat het oude wachtwoord behouden blijft.
        if (!empty($validatedData['password'])) {
            $validatedData['password'] = Hash::make($validatedData['password']);
        } else {
            unset($validatedData['password']);
        }

        // Foto-upload verwerken: als er een nieuwe foto is geÃ¼pload, verwerken we deze.
        if ($request->hasFile('photo_id')) {
            $file = $request->file('photo_id');
            $uniqueName = Str::uuid() . '.' . $file->getClientOriginalExtension();
            $filePath = $this->folder . '/' . $uniqueName;
            $file->storeAs('', $filePath, 'public');

            // Als de gebruiker al een foto heeft, verwijderen we de oude file en updaten we het bestaande record.
            if ($user->photo && Storage::disk('public')->exists($user->photo->path)) {
                Storage::disk('public')->delete($user->photo->path);
                $user->photo->update([
                    'path' => $filePath,
                    'alternate_text' => $validatedData['name']
                ]);
                $validatedData['photo_id'] = $user->photo->id;
            } else {

                // Anders maken we een nieuw Photo-record aan.
                $photo = Photo::create([
                    'path' => $filePath,
                    'alternate_text' => $validatedData['name']
                ]);
                $validatedData['photo_id'] = $photo->id;
            }
        }

        // Werk de gebruiker bij met de gevalideerde data
        $user->update($validatedData);

        // Synchroniseer de rollen van de gebruiker
        $user->roles()->sync($validatedData['role_id']);
        return redirect()->back()->with('message', 'User updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        // Delete van een user
        $user = User::with('photo')->findOrFail($id);

        // Controleer of het fysieke bestand bestaat
        if ($user->photo) {
            if (Storage::disk('public')->exists($user->photo->path)) {
                Storage::disk('public')->delete($user->photo->path);
            }
        }

        // Verwijderen van de user
        $user->delete();

        // Redirect
        return redirect()->route('users.index')->with('message', 'User deleted successfully!');
    }

    public function restore(string $id)
    {
        $user = User::withTrashed()->findOrFail($id);
        $user->restore();
        return redirect()->route('users.index')->with('message', 'User restored successfully!');
    }
}
